service: licoreriaryc-api

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment: ${self:custom.${self:provider.stage}}
  lambdaHashingVersion: '20201221'
  apiGateway:
    shouldStartNameWithService: true
    binaryMediaTypes:
      - 'multipart/form-data'
      - 'image/heic'
      - 'image/heif'
      - 'image/avif'
      - 'image/jpeg'
      - 'image/jpg'
      - 'image/png'
      - 'image/raw'
      - 'image/tiff'
      - 'image/webp'
      - 'image/gif'
      - '*/*'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:GetObject
            - s3:GetObjectAcl
          Resource: 'arn:aws:s3:::${self:provider.environment.BUCKET}/*'
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:BatchGetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:CreateTable
            - dynamodb:DescribeTable
          Resource:
            - Fn::GetAtt: [ProductsTable, Arn]

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  bucket: ${self:service}-${self:provider.stage}
  dev:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
    BUCKET: ${self:custom.bucket}
    CORS: http://localhost
  prod:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
    BUCKET: ${self:custom.bucket}
    CORS: https://www.licoreriaryc.com, http://*.licoreriaryc.com
  serverless-offline:
    httpPort: 4000
  webpackIncludeModules: true
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
  webpack:
    packagerOptions:
      scripts:
        - npm uni sharp && npm i --arch=x64 --platform=linux sharp
functions:
  graphql:
    handler: src/handler.index
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true
  getImage:
    handler: src/getImage.getImage
    events:
      - http:
          path: getImage
          method: get
          cors: true

resources:
  Resources:
    ProductsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    S3BucketOutputs:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket}
